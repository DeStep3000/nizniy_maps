import streamlit as st
import requests


class YandexGPTClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex GPT API.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å.
    """

    def __init__(self):
        self.url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

    def generate_explanation(self, prompt, temperature=0.5, max_tokens=400):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Yandex GPT API.

        Args:
            prompt (str): –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            temperature (float): –ü–∞—Ä–∞–º–µ—Ç—Ä –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0-1)
            max_tokens (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ

        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Streamlit
            api_key = st.secrets.get("YANDEX_API_KEY")
            folder_id = st.secrets.get("YANDEX_FOLDER_ID")

            if not api_key or not folder_id:
                return None

            headers = {
                "Authorization": f"Api-Key {api_key}",
                "Content-Type": "application/json"
            }

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            payload = {
                "modelUri": f"gpt://{folder_id}/yandexgpt-lite",
                "completionOptions": {
                    "stream": False,
                    "temperature": temperature,
                    "maxTokens": max_tokens
                },
                "messages": [
                    {
                        "role": "system",
                        "text": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É —Å —Ç–∞–ª–∞–Ω—Ç–æ–º —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫–∞.
                        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–æ—á–Ω—ã–µ, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
                    },
                    {
                        "role": "user",
                        "text": prompt
                    }
                ]
            }

            response = requests.post(self.url, headers=headers, json=payload, timeout=30)
            response.raise_for_status()

            result = response.json()
            return result["result"]["alternatives"][0]["message"]["text"]

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ Yandex GPT: {e}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
yandex_gpt = YandexGPTClient()


def generate_route_explanation(route, selected_categories, total_time, categories_dict, start_position):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.

    Args:
        route (list): –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
        selected_categories (list): –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        total_time (int): –û–±—â–µ–µ –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        categories_dict (dict): –°–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        start_position (tuple): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏

    Returns:
        str: –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—è—Ö
    """
    if not route:
        return "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç–æ–≤."

    # –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –º–∞—Ä—à—Ä—É—Ç–∞
    total_travel_time = sum(point["travel_time"] for point in route)
    total_visit_time = sum(point["visit_time"] for point in route)
    total_distance = sum(point["distance"] for point in route)

    selected_cats_names = [categories_dict.get(cat_id, "–î—Ä—É–≥–æ–µ") for cat_id in selected_categories]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    object_descriptions = []
    for i, point in enumerate(route, 1):
        obj = point["object"]
        category_name = categories_dict.get(obj["category_id"], "–î—Ä—É–≥–æ–µ")
        description = obj["description"]

        # –û–±—Ä–µ–∑–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
        if len(description) > 200:
            description = description[:200] + "..."

        object_info = f"{i}. {obj['title']} ({category_name}) - {description}"
        object_descriptions.append(object_info)

    descriptions_text = "\n".join(object_descriptions)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    prompt = f"""
–°–û–ó–î–ê–ô –ö–†–ê–°–û–í–û–ï –û–ü–ò–°–ê–ù–ò–ï –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–û–ì–û –ú–ê–†–®–†–£–¢–ê –ü–û –ù–ò–ñ–ù–ï–ú–£ –ù–û–í–ì–û–†–û–î–£

    –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–ê–†–®–†–£–¢–ï:
    - –ò–Ω—Ç–µ—Ä–µ—Å—ã —Ç—É—Ä–∏—Å—Ç–∞: {", ".join(selected_cats_names)}
    - –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time} –º–∏–Ω—É—Ç
    - –ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å: {total_distance:.0f} –º–µ—Ç—Ä–æ–≤
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(route)}
    - –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: {total_travel_time:.1f} –º–∏–Ω—É—Ç
    - –í—Ä–µ–º—è –Ω–∞ –æ—Å–º–æ—Ç—Ä: {total_visit_time} –º–∏–Ω—É—Ç

    –ü–û–î–†–û–ë–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï –û–ë–™–ï–ö–¢–û–í –ú–ê–†–®–†—Ä—É–¢–ê:
    –ü–û–î–†–û–ë–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï –û–ë–™–ï–ö–¢–û–í –ú–ê–†–®–†–£–¢–ê:
    {descriptions_text}

    –ó–ê–î–ê–ß–ê:
    –°–æ–∑–¥–∞–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ:
    1. –ö—Ä–∞—Ç–∫–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ö–ê–ñ–î–û–ì–û –æ–±—ä–µ–∫—Ç–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç)
    1. –ö—Ä–∞—Ç–∫–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ö–ê–ñ–î–û–ì–û –æ–±—ä–µ–∫—Ç–∞ –ö–†–ê–¢–ö–û (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç)
    2. –û–±—ä—è—Å–Ω—è–µ—Ç, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã
    3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    4. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–æ–ª—å–∑—É –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏
    5. –°–æ–∑–¥–∞–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω—ã–π –æ–±—Ä–∞–∑ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É

    –û–°–û–ë–´–ï –£–ö–ê–ó–ê–ù–ò–Ø:
    - –ò—Å–ø–æ–ª—å–∑—É–π —è—Ä–∫–∏–µ, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
    - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ (1-2 –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏)
    - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ –°–ê–ú–û–ï –ì–õ–ê–í–ù–û–ï (1-2 –∫–ª—é—á–µ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å)
    - –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –∏ –∫—É–ª—å—Ç—É—Ä–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–æ–≤ –∫—Ä–∞—Ç–∫–æ
    - –ü–æ–∫–∞–∂–∏, –∫–∞–∫ –º–∞—Ä—à—Ä—É—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã —Ç—É—Ä–∏—Å—Ç–∞ –≤ {", ".join(selected_cats_names)}
    - –°–æ–∑–¥–∞–π –æ—â—É—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≥–æ—Ä–æ–¥–∞
    - –û–ü–ò–°–ê–ù–ò–ï –ö–ê–ñ–î–û–ì–û –û–ë–™–ï–ö–¢–ê –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ö–†–ê–¢–ö–ò–ú –ò –°–û–î–ï–†–ñ–ê–¢–ï–õ–¨–ù–´–ú

    –ù–ê–ß–ù–ò –û–ü–ò–°–ê–ù–ò–ï:
"""

    # –û—Å–Ω–æ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
    with st.spinner("üé® –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞..."):
        explanation = yandex_gpt.generate_explanation(prompt)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—è—Ö –ò–ò
        if explanation:
            explanation += "\n\n---\n"
            explanation += "‚ö†Ô∏è *–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.*"

    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    if not explanation:
        st.warning("‚ö†Ô∏è Yandex GPT –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
        explanation = generate_enhanced_fallback_explanation(
            route, selected_cats_names, total_time, categories_dict, start_position, descriptions_text
        )

    return explanation


def generate_enhanced_fallback_explanation(route, selected_cats_names, total_time, categories_dict, start_position,
                                           descriptions_text=""):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Yandex GPT API.

    Args:
        route (list): –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
        selected_cats_names (list): –ù–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        total_time (int): –û–±—â–µ–µ –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞
        categories_dict (dict): –°–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        start_position (tuple): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
        descriptions_text (str): –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤

    Returns:
        str: –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    """
    if not route:
        return "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç–æ–≤."

    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –º–∞—Ä—à—Ä—É—Ç–µ
    category_counts = {}
    total_distance = 0
    for point in route:
        cat_id = point["object"]["category_id"]
        category_counts[cat_id] = category_counts.get(cat_id, 0) + 1
        total_distance += point["distance"]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    main_categories = []
    for cat_id, count in category_counts.items():
        cat_name = categories_dict.get(cat_id, "–î—Ä—É–≥–æ–µ")
        main_categories.append(f"{cat_name} ({count} –æ–±—ä–µ–∫—Ç–æ–≤)")

    # –í—ã–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    key_objects = []
    for i, point in enumerate(route):
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π, –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏ —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç—ã –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ
        if i == 0 or i == len(route) - 1 or i == len(route) // 2:
            obj = point["object"]
            key_objects.append(f"'{obj['title']}'")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    explanation = f"""–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π {", ".join(selected_cats_names)}!

–≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –ø—Ä–æ–≤–µ–¥–µ—Ç –≤–∞—Å —á–µ—Ä–µ–∑ {len(route)} –∑–Ω–∞–∫–æ–≤—ã—Ö locations, –Ω–∞—á–∏–Ω–∞—è —Å {route[0]['object']['title']} –∏ –∑–∞–≤–µ—Ä—à–∞—è {route[-1]['object']['title']}. –í—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ—Å—å —Å –±–æ–≥–∞—Ç—ã–º –Ω–∞—Å–ª–µ–¥–∏–µ–º –≥–æ—Ä–æ–¥–∞, –≥–¥–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç {", ".join(main_categories[:2])}.

–ü–æ –ø—É—Ç–∏ –≤–∞—Å –∂–¥—É—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ {", ".join(key_objects[:3])}, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ—é —á–∞—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ–ª–∏–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –í–æ–ª–≥–µ. 

–ú–∞—Ä—à—Ä—É—Ç –ø—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å—é {total_distance:.0f} –º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è {total_time}-–º–∏–Ω—É—Ç–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–∏, –ø–æ–∑–≤–æ–ª—è—è –Ω–µ—Å–ø–µ—à–Ω–æ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π, –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Å—Ç–∞—Ä–∏–Ω–Ω—ã—Ö —É–ª–∏—Ü –∏ —Å–¥–µ–ª–∞—Ç—å –ø–∞–º—è—Ç–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.

–≠—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞, –æ—â—É—Ç–∏–≤ –µ–≥–æ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –≤–µ–ª–∏—á–∏–µ."""

    return explanation