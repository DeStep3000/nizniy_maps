from datetime import datetime

import streamlit as st
from streamlit_folium import st_folium
from streamlit_js_eval import get_geolocation

from src.constants import CATEGORIES as categories
from src.data_loader import load_data
from src.llm_utils import generate_enhanced_fallback_explanation, generate_route_explanation
from src.map_utils import create_interactive_map
from src.routing import generate_route_description, plan_route
from src.utils import generate_yandex_maps_url, apply_chat_style, chat_response


def _init_state():
    if "start_position" not in st.session_state:
        st.session_state.start_position = (56.326887, 44.005986)
    if "selected_categories" not in st.session_state:
        st.session_state.selected_categories = [1, 2, 7]
    if "route_built" not in st.session_state:
        st.session_state.route_built = False
    if "current_route" not in st.session_state:
        st.session_state.current_route = None
    if "route_explanation" not in st.session_state:
        st.session_state.route_explanation = None
    if "explanation_generating" not in st.session_state:
        st.session_state.explanation_generating = False
    if "used_llm_route_explanation" not in st.session_state:
        st.session_state.used_llm_route_explanation = False
    if "getting_location" not in st.session_state:
        st.session_state.getting_location = False


def main():  # noqa: C901
    st.set_page_config(page_title="–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥ - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤", layout="wide")
    st.markdown("""
        <h1 style='
            font-size: 3.5vw;
            color: #ff6b6b;
            text-align: center;
            font-family: Arial;
        '>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞</h1>
    """, unsafe_allow_html=True)

    _init_state()
    df = load_data()

    st.sidebar.markdown(
        "<h2 style='color: #ff6b6b; font-size: 3vw; text-align: center; font-weight: bold;'>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞</h2>",
        unsafe_allow_html=True
    )

    st.sidebar.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    selected_categories = []
    col1, col2 = st.sidebar.columns(2)

    with col1:
        for cat_id, cat_name in list(categories.items())[:len(categories) // 2]:
            is_checked = cat_id in st.session_state.selected_categories
            if st.checkbox(cat_name, value=is_checked, key=f"cat_{cat_id}"):
                selected_categories.append(cat_id)

    with col2:
        for cat_id, cat_name in list(categories.items())[len(categories) // 2:]:
            is_checked = cat_id in st.session_state.selected_categories
            if st.checkbox(cat_name, value=is_checked, key=f"cat_{cat_id}_2"):
                selected_categories.append(cat_id)

    st.session_state.selected_categories = selected_categories

    total_time = st.sidebar.slider("–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É (–º–∏–Ω—É—Ç):", min_value=30, max_value=240, value=120, step=15)

    search_radius = st.sidebar.slider(
        "–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ (–º–µ—Ç—Ä–æ–≤):", min_value=500, max_value=3000, value=1500, step=100
    )

    use_llm = st.sidebar.checkbox("ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞", value=True)

    st.sidebar.markdown(
        "<h2 style='color: #ff6b6b; font-size: 3vw; text-align: center; font-weight: bold;'>–í—ã–±–æ—Ä —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞</h2>",
        unsafe_allow_html=True
    )
    popular_points = {
        "–ö—Ä–µ–º–ª—å": (56.326887, 44.005986),
        "–ü–ª–æ—â–∞–¥—å –ú–∏–Ω–∏–Ω–∞": (56.327266, 44.006597),
        "–ë–æ–ª—å—à–∞—è –ü–æ–∫—Ä–æ–≤—Å–∫–∞—è": (56.318136, 43.995234),
        "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è –§–µ–¥–æ—Ä–æ–≤—Å–∫–æ–≥–æ": (56.325238, 43.985295),
        "–°—Ç—Ä–µ–ª–∫–∞": (56.334505, 43.976589),
    }

    selected_point = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é —Ç–æ—á–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", list(popular_points.keys()))
    if st.sidebar.button("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞"):
        st.session_state.start_position = popular_points[selected_point]
        st.session_state.route_built = False
        st.session_state.route_explanation = None
        st.session_state.explanation_generating = False
        st.rerun()

    if st.session_state.getting_location:
        loc = get_geolocation()
        if loc and 'coords' in loc:
            st.session_state.start_position = (loc['coords']['latitude'], loc['coords']['longitude'])
            st.session_state.route_built = False
            st.session_state.route_explanation = None
            st.session_state.explanation_generating = False
            st.session_state.getting_location = False
            st.rerun()
        elif loc:
            st.sidebar.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")
            st.session_state.getting_location = False

    st.sidebar.markdown(
        "<h2 style='color: #ff6b6b; font-size: 3vw; text-align: center; font-weight: bold;'>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é</h2>",
        unsafe_allow_html=True
    )
    if st.sidebar.button("üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"):
        st.session_state.getting_location = True
        st.rerun()

    if st.sidebar.button("üöÄ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", type="primary", use_container_width=True):
        if not selected_categories:
            st.sidebar.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        else:
            with st.spinner("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞..."):
                route = plan_route(st.session_state.start_position, selected_categories, total_time, df, search_radius)
            if route:
                st.session_state.current_route = route
                st.session_state.route_built = True
                st.session_state.route_explanation = None
                st.session_state.explanation_generating = True
                st.sidebar.success(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω! –ü–æ—Å–µ—â–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(route)}")
                st.rerun()
            else:
                st.sidebar.warning(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É."
                )

    if st.session_state.route_built:
        if st.sidebar.button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", type="secondary"):
            st.session_state.route_built = False
            st.session_state.current_route = None
            st.session_state.route_explanation = None
            st.session_state.explanation_generating = False
            st.rerun()

    if not st.session_state.route_built:
        st.subheader("üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
        st.markdown(
            "**üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:** –ö–ª–∏–∫–Ω–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞. –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å—Ä–∞–∑—É."
        )

        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É..."):
            map_obj = create_interactive_map(
                df,
                selected_categories,
                st.session_state.start_position[0],
                st.session_state.start_position[1],
                search_radius,
                st.session_state.start_position,
                None,
            )

            map_data = st_folium(map_obj, width=None, height=600, returned_objects=["last_clicked"])

            if map_data and map_data.get("last_clicked"):
                clicked_lat = map_data["last_clicked"]["lat"]
                clicked_lon = map_data["last_clicked"]["lng"]

                if (clicked_lat, clicked_lon) != st.session_state.start_position:
                    st.session_state.start_position = (clicked_lat, clicked_lon)
                    st.session_state.route_built = False
                    st.session_state.route_explanation = None
                    st.session_state.explanation_generating = False
                    st.rerun()
    else:
        col1, col2 = st.columns([2, 1])

        with col1:
            st.subheader("üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
            st.markdown(
                "**üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:** –ö–ª–∏–∫–Ω–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞. –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å—Ä–∞–∑—É."
            )

            with st.spinner("–°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç..."):
                map_obj = create_interactive_map(
                    df,
                    selected_categories,
                    st.session_state.start_position[0],
                    st.session_state.start_position[1],
                    search_radius,
                    st.session_state.start_position,
                    st.session_state.current_route
                )

                map_data = st_folium(map_obj, width=None, height=500, returned_objects=["last_clicked"])

                if map_data and map_data.get("last_clicked"):
                    clicked_lat = map_data["last_clicked"]["lat"]
                    clicked_lon = map_data["last_clicked"]["lng"]

                    if (clicked_lat, clicked_lon) != st.session_state.start_position:
                        st.session_state.start_position = (clicked_lat, clicked_lon)
                        st.session_state.route_built = False
                        st.session_state.route_explanation = None
                        st.session_state.explanation_generating = False
                        st.rerun()

            if (use_llm and
                    st.session_state.explanation_generating and
                    st.session_state.route_explanation is None):
                with st.spinner("üé® –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —Å –ò–ò..."):
                    explanation = generate_route_explanation(
                        st.session_state.current_route,
                        selected_categories,
                        total_time,
                        categories,
                        st.session_state.start_position
                    )
                    st.session_state.route_explanation = explanation
                    st.session_state.explanation_generating = False
                    st.session_state.used_llm_route_explanation = True
                    st.rerun()
            elif (st.session_state.explanation_generating and
                    st.session_state.route_explanation is None):
                with st.spinner("‚ùì –°–æ–∑–¥–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞..."):
                    explanation = generate_enhanced_fallback_explanation(
                            st.session_state.current_route,
                            selected_categories,
                            total_time,
                            categories,
                            st.session_state.start_position)
                    st.session_state.route_explanation = explanation
                    st.session_state.explanation_generating = False
                    st.session_state.used_llm_route_explanation = False
                    st.rerun()

            if st.session_state.route_explanation:
                apply_chat_style()
                chat_response(st.session_state.route_explanation, st.session_state.used_llm_route_explanation)

        with col2:
            if st.session_state.current_route:
                route = st.session_state.current_route

                yandex_url = generate_yandex_maps_url(route, st.session_state.start_position)

                st.subheader("üìç –ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç")

                if yandex_url:
                    st.markdown(
                        f'<a href="{yandex_url}" target="_blank"><button style="background-color: #FF0000; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; width: 100%;">üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö</button></a>',
                        unsafe_allow_html=True,
                    )
                    st.markdown("")

                st.subheader("üìù –î–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞")

                total_distance = 0
                total_time_route = 0

                for i, point in enumerate(route, 1):
                    obj = point["object"]

                    with st.expander(f"{i}. {obj['title']}", expanded=(i == 1)):
                        st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {categories.get(obj['category_id'], '–î—Ä—É–≥–æ–µ')}")
                        st.write(f"**–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:** {point['travel_time']:.1f} –º–∏–Ω")
                        st.write(f"**–í—Ä–µ–º—è –Ω–∞ –æ—Å–º–æ—Ç—Ä:** {point['visit_time']} –º–∏–Ω")
                        st.write(f"**–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:** {point['distance']:.0f} –º")
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {obj['description']}")

                        st.code(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {obj['lat']:.6f}, {obj['lon']:.6f}")

                    total_distance += point["distance"]
                    total_time_route += point["travel_time"] + point["visit_time"]

                st.subheader("üìä –ò—Ç–æ–≥–∏ –º–∞—Ä—à—Ä—É—Ç–∞")
                col_stat1, col_stat2, col_stat3 = st.columns(3)

                with col_stat1:
                    st.metric("–û–±—ä–µ–∫—Ç–æ–≤", len(route))
                with col_stat2:
                    st.metric("–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", f"{total_distance:.0f} –º")
                with col_stat3:
                    st.metric("–û–±—â–µ–µ –≤—Ä–µ–º—è", f"{total_time_route:.1f} –º–∏–Ω")

                description = generate_route_description(route)
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞",
                    data=description,
                    file_name=f"–º–∞—Ä—à—Ä—É—Ç_–Ω–∏–∂–Ω–∏–π_–Ω–æ–≤–≥–æ—Ä–æ–¥_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
                    mime="text/plain",
                    use_container_width=True,
                )


if __name__ == "__main__":
    main()