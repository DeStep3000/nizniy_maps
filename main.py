from datetime import datetime

import streamlit as st
from streamlit_folium import st_folium

from app.constants import CATEGORIES as categories
from app.data_loader import load_data
from app.llm_utils import generate_route_explanation
from app.map_utils import create_interactive_map
from app.routing import generate_route_description, plan_route
from app.utils import generate_yandex_maps_url


def _init_state():
    if 'start_position' not in st.session_state:
        st.session_state.start_position = (56.326887, 44.005986)
    if 'selected_categories' not in st.session_state:
        st.session_state.selected_categories = [1, 2, 7]
    if 'route_built' not in st.session_state:
        st.session_state.route_built = False
    if 'current_route' not in st.session_state:
        st.session_state.current_route = None
    if 'route_explanation' not in st.session_state:
        st.session_state.route_explanation = None


def main():
    st.set_page_config(
        page_title="–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥ - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤", layout="wide")
    st.title("üèõÔ∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞")

    _init_state()
    df = load_data()

    st.sidebar.header("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞")

    selected_categories = st.sidebar.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        options=list(categories.keys()),
        format_func=lambda x: categories[x],
        default=st.session_state.selected_categories
    )
    st.session_state.selected_categories = selected_categories

    total_time = st.sidebar.slider(
        "–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É (–º–∏–Ω—É—Ç):",
        min_value=30,
        max_value=240,
        value=120,
        step=15
    )

    search_radius = st.sidebar.slider(
        "–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ (–º–µ—Ç—Ä–æ–≤):",
        min_value=500,
        max_value=3000,
        value=1500,
        step=100
    )

    use_llm = st.sidebar.checkbox(
        "ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞", value=True)

    st.sidebar.subheader("üöÄ –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞")
    popular_points = {
        "–ö—Ä–µ–º–ª—å": (56.326887, 44.005986),
        "–ü–ª–æ—â–∞–¥—å –ú–∏–Ω–∏–Ω–∞": (56.327266, 44.006597),
        "–ë–æ–ª—å—à–∞—è –ü–æ–∫—Ä–æ–≤—Å–∫–∞—è": (56.318136, 43.995234),
        "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è –§–µ–¥–æ—Ä–æ–≤—Å–∫–æ–≥–æ": (56.325238, 43.985295),
        "–°—Ç—Ä–µ–ª–∫–∞": (56.334505, 43.976589)
    }

    selected_point = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é —Ç–æ—á–∫—É:", list(popular_points.keys()))
    if st.sidebar.button("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞"):
        st.session_state.start_position = popular_points[selected_point]
        st.session_state.route_built = False
        st.rerun()

    st.sidebar.info(
        f"üìç –¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞:\n{st.session_state.start_position[0]:.6f}, {st.session_state.start_position[1]:.6f}")
    st.sidebar.info(f"üéØ –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(selected_categories)}")
    st.sidebar.info(
        f"üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ: {len(df[df['category_id'].isin(selected_categories)]) if selected_categories else len(df)}")

    if st.sidebar.button("üöÄ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", type="primary", use_container_width=True):
        if not selected_categories:
            st.sidebar.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        else:
            # –°–ø–∏–Ω–Ω–µ—Ä—ã –≤ UI –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å (–ø–æ –∂–µ–ª–∞–Ω–∏—é),
            # –Ω–æ —Å–ø–∏–Ω–Ω–µ—Ä –ø—Ä–∏ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—ç—à–∞/—Ä–µ—Å—É—Ä—Å–æ–≤ –æ—Ç–∫–ª—é—á—ë–Ω –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞—Ö cache_*.
            route = plan_route(st.session_state.start_position,
                               selected_categories, total_time, df)

            if route:
                st.session_state.current_route = route
                st.session_state.route_built = True

                if use_llm:
                    explanation = generate_route_explanation(
                        route,
                        selected_categories,
                        total_time,
                        categories,
                        st.session_state.start_position
                    )
                    st.session_state.route_explanation = explanation
                else:
                    st.session_state.route_explanation = None

                st.sidebar.success(
                    f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω! –ü–æ—Å–µ—â–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(route)}")
            else:
                st.sidebar.warning(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É.")

    if st.session_state.route_built:
        if st.sidebar.button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", type="secondary"):
            st.session_state.route_built = False
            st.session_state.current_route = None
            st.session_state.route_explanation = None
            st.rerun()

    col1, col2 = st.columns([2, 1])

    with col1:
        st.subheader("üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
        st.markdown(
            "**üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞. –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å—Ä–∞–∑—É.")

        map_obj = create_interactive_map(
            df,
            selected_categories,
            st.session_state.start_position[0],
            st.session_state.start_position[1],
            search_radius,
            st.session_state.start_position,
            st.session_state.current_route if st.session_state.route_built else None
        )

        map_data = st_folium(
            map_obj,
            width=700,
            height=500,
            returned_objects=["last_clicked"]
        )

        if map_data and map_data.get("last_clicked"):
            clicked_lat = map_data["last_clicked"]["lat"]
            clicked_lon = map_data["last_clicked"]["lng"]

            if (clicked_lat, clicked_lon) != st.session_state.start_position:
                st.session_state.start_position = (clicked_lat, clicked_lon)
                st.session_state.route_built = False
                st.rerun()

        if st.session_state.route_built and st.session_state.route_explanation:
            st.subheader("ü§ñ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞")
            st.info(st.session_state.route_explanation)

    with col2:
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")

        if st.session_state.route_built and st.session_state.current_route:
            route = st.session_state.current_route

            yandex_url = generate_yandex_maps_url(
                route, st.session_state.start_position)

            st.subheader("üìç –ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç")

            if yandex_url:
                st.markdown(
                    f'<a href="{yandex_url}" target="_blank"><button style="background-color: #FF0000; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; width: 100%;">üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö</button></a>',
                    unsafe_allow_html=True)
                st.markdown("")

            st.subheader("üìù –î–µ—Ç–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∞")

            total_distance = 0
            total_time_route = 0

            for i, point in enumerate(route, 1):
                obj = point['object']

                with st.expander(f"{i}. {obj['title']}", expanded=(i == 1)):
                    st.write(
                        f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {categories.get(obj['category_id'], '–î—Ä—É–≥–æ–µ')}")
                    st.write(
                        f"**–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:** {point['travel_time']:.1f} –º–∏–Ω")
                    st.write(f"**–í—Ä–µ–º—è –Ω–∞ –æ—Å–º–æ—Ç—Ä:** {point['visit_time']} –º–∏–Ω")
                    st.write(f"**–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:** {point['distance']:.0f} –º")
                    st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {obj['description']}")

                    st.code(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {obj['lat']:.6f}, {obj['lon']:.6f}")

                total_distance += point['distance']
                total_time_route += point['travel_time'] + point['visit_time']

            st.subheader("üìä –ò—Ç–æ–≥–∏ –º–∞—Ä—à—Ä—É—Ç–∞")
            col_stat1, col_stat2, col_stat3 = st.columns(3)

            with col_stat1:
                st.metric("–û–±—ä–µ–∫—Ç–æ–≤", len(route))
            with col_stat2:
                st.metric("–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", f"{total_distance:.0f} –º")
            with col_stat3:
                st.metric("–û–±—â–µ–µ –≤—Ä–µ–º—è", f"{total_time_route:.1f} –º–∏–Ω")

            description = generate_route_description(route)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞",
                data=description,
                file_name=f"–º–∞—Ä—à—Ä—É—Ç_–Ω–∏–∂–Ω–∏–π_–Ω–æ–≤–≥–æ—Ä–æ–¥_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
                mime="text/plain",
                use_container_width=True
            )
        else:
            st.info("üëÜ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç' –≤ —Å–∞–π–¥–±–∞—Ä–µ")

        st.subheader("üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        if selected_categories:
            for cat_id in selected_categories:
                cat_name = categories.get(cat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat_id}")
                count = len(df[df['category_id'] == cat_id])
                st.write(f"- {cat_name} ({count} –æ–±—ä–µ–∫—Ç–æ–≤)")
        else:
            st.write("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")

        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.write(f"–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(df)}")
        st.write(
            f"–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ: {len(df[df['category_id'].isin(selected_categories)]) if selected_categories else len(df)}")
        st.write(
            f"–¢–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞: {st.session_state.start_position[0]:.6f}, {st.session_state.start_position[1]:.6f}")


if __name__ == "__main__":
    main()
